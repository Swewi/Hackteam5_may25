"""
Django settings for familyhack5 project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import json
from pathlib import Path
import cloudinary
import cloudinary.uploader
import cloudinary.api
import dj_database_url
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get the secret key from environment variables, falling back to the default only in development
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-hpl@h@mr8e^59y+p92qrxr^3&3=ks1w!cq2391+p@(j*e6!m2n')

# SECURITY WARNING: don't run with debug turned on in production!
# Determine environment (default to development)
ENVIRONMENT = os.getenv('ENV', 'development')

# Google credentials handling for Heroku
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')
GOOGLE_APPLICATION_CREDENTIALS = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')

# Create the credentials file from environment variable if it exists
if GOOGLE_CREDENTIALS_JSON and not GOOGLE_APPLICATION_CREDENTIALS:
    # Create temp directory if it doesn't exist
    temp_dir = os.path.join(BASE_DIR, 'temp')
    os.makedirs(temp_dir, exist_ok=True)

    # Write the credentials to a temporary file
    temp_credentials_path = os.path.join(temp_dir, 'google-credentials.json')
    with open(temp_credentials_path, 'w') as credentials_file:
        credentials_file.write(GOOGLE_CREDENTIALS_JSON)

    # Set the credentials path environment variable
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = temp_credentials_path
    GOOGLE_APPLICATION_CREDENTIALS = temp_credentials_path
    
# Load correct .env file
if ENVIRONMENT == 'production':
    load_dotenv(os.path.join(BASE_DIR, '.env.production'))
else:
    load_dotenv(os.path.join(BASE_DIR, '.env.development'))

DEBUG = ENVIRONMENT != 'production'

ALLOWED_HOSTS = (
    ['127.0.0.1', 'localhost']
    if DEBUG
    else os.getenv('ALLOWED_HOSTS', '').split(',')
)

additional_hosts = os.getenv('ADDITIONAL_HOSTS', '').split(',')
if additional_hosts and additional_hosts[0]:
    ALLOWED_HOSTS.extend(additional_hosts)

# Extend for Gitpod in DEBUG mode
additional_hosts = os.getenv('ALLOWED_HOSTS', '').split(',')
if additional_hosts and additional_hosts[0]:
    ALLOWED_HOSTS.extend(additional_hosts)

# Application definition

INSTALLED_APPS = [
    'baton',  # Baton admin interface (must be before django.contrib.admin)
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'cloudinary',
    'django_bootstrap5',
    'home',
    'assistant',
    'team',
    
    # Baton admin app (must be after all apps)
    'baton.autodiscover',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'familyhack5.middleware.FirstInteractionIDMiddleware',
]

# Add browser reload middleware for development
if DEBUG:
    MIDDLEWARE.append('django_browser_reload.middleware.BrowserReloadMiddleware')


ROOT_URLCONF = 'familyhack5.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # Required by allauth
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
    # Add Jinja2 support
{
    'BACKEND': 'django_jinja.backend.Jinja2',
    'DIRS': [os.path.join(BASE_DIR, 'jinja2')],
    'APP_DIRS': True,
    'OPTIONS': {
        'context_processors': [
            'django.template.context_processors.debug',
            'django.template.context_processors.request',
            'django.contrib.auth.context_processors.auth',
            'django.contrib.messages.context_processors.messages',
        ],
        'extensions': [
            'jinja2.ext.do',
            'jinja2.ext.loopcontrols',
            'jinja2.ext.i18n',
            'django_jinja.builtins.extensions.CsrfExtension',
            'django_jinja.builtins.extensions.CacheExtension',
            'django_jinja.builtins.extensions.TimezoneExtension',
            'django_jinja.builtins.extensions.UrlsExtension',
            'django_jinja.builtins.extensions.StaticFilesExtension',
            'django_jinja.builtins.extensions.DjangoFiltersExtension',
        ],
    }
},

]

WSGI_APPLICATION = 'familyhack5.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Check if an external database URL is provided
database_url = os.environ.get('DATABASE_URL')

if database_url:
    # If DATABASE_URL is provided, use it
    DATABASES = {
        'default': dj_database_url.config(
            default=database_url,
            conn_max_age=600,
            ssl_require=not DEBUG  # Only require SSL in production
        )
    }
else:
    # Use SQLite for development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# For production, set up static root
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# For development, define staticfiles dirs
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Whitenoise static files storage
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Cloudinary configuration
cloudinary.config(
    cloud_name=os.getenv('CLOUDINARY_CLOUD_NAME', ''),
    api_key=os.getenv('CLOUDINARY_API_KEY', ''),
    api_secret=os.getenv('CLOUDINARY_API_SECRET', ''),
    secure=True
)


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django Baton config
BATON = {
    'SITE_HEADER': 'FamilyHack5 Admin',
    'SITE_TITLE': 'FamilyHack5',
    'INDEX_TITLE': 'Administration',
    'SUPPORT_HREF': 'https://github.com/ljkkj7/familyhack5',
    'COPYRIGHT': 'copyright Â© 2025',
    'POWERED_BY': '<a href="https://github.com/ljkkj7/familyhack5">FamilyHack5</a>',
    'MENU': (
        { 'type': 'title', 'label': 'Main', 'apps': ('auth', ) },
        {
            'type': 'app',
            'name': 'auth',
            'label': 'Authentication',
            'icon': 'fa fa-lock',
        },
        { 'type': 'title', 'label': 'Contents', 'apps': ('flatpages', ) },
        # Add more menu items for your custom apps
    ),
}

# Django Import Export settings
IMPORT_EXPORT_USE_TRANSACTIONS = True

# Add SITE_ID for django-allauth
SITE_ID = 1

# Add authentication backends for django-allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Update deprecated settings for django-allauth
ACCOUNT_LOGIN_METHODS = {'username'}
ACCOUNT_SIGNUP_FIELDS = ['username*', 'password1*', 'password2*']

# Redirect to home page after login or signup
LOGIN_REDIRECT_URL = '/'
ACCOUNT_SIGNUP_REDIRECT_URL = '/'
